- (6 April 2008) If we force an integer data type for "Z" interval matrices,
  perhaps this will keep users from inserting invalid endpoints into an existing
  object. Although perhaps not... R will just update the matrix data type on the
  fly, and will probably not call the validity function for the containing
  object. 

  (5 May 2008) An alternative here -- one which is probably more natural -- is
  to just determine endpoint type on the basis of the data types of the
  matrices. One or more real-valued matrices causes real-line
  computation. Possibly provide a utility L(), to make numeric matrices
  integral, generating a warning if rounding is required. Also add a switch to
  all functions which behaves in the same way.

  It should be the case that we ALWAYS use the type() accessor for checking and
  setting matrix types -- except in class definitions, initialize methods, and
  the definition of the type() accessors themselves. If so, it will be simple to
  drop the explicit slot and do as described in the preceeding paragraphs.

- (7 May 2008) In the end, I should probably leave accessors intact but NOT use
  replacement methods in my own code -- since these create efficiency problems
  due to copying.

- (30 May 2008) Consider replacing coerce methods with setAs. In particular,
  it's disappointing to see that as.matrix doesn't work currently.

- (1 June 2008) PSEUDO-CODE FOR R all.equal.numeric

    - Set tolerance = .Machine$double.eps^0.5.

    - Only check non-NA pairs for which == fails.

    - Set xy to the mean absolute difference (along the vectors).

    - Set xn to the mean absolute target.

    - If xn > tolerance, make a relative comparison and set xy to
      xy/xn. Otherwise, make an absolute comparison and leave xy as it is.

    - Return equality iff xy <= tolerance.

  Note: dropping entries for which == holds is important, as it affects the means
  below. We will, however most likely apply our procedure to single pairs of
  numbers, so it won't matter: if == holds, then the relative difference is 0 in
  any case. An important issue: R's relative difference is abs( tar - cur )  /
  tar. The traditional definition, however, is abs( tar - cur ) / max( tar, cur
  ). On the other hand, the comp.lang.c FAQ first uses R's version, then the
  traditional relative difference.

  THIS IS NOW FINISHED FOR BOTH INTERVAL_UNION AND INTERVAL_OVERLAP.

- (10 June 2008) More functions to implement (based largely on the e-mail from
  Julien on 12 February 2008):

    - The subset version of interval_overlap: interval_included.

    - A set difference.

    - Distance to nearest and which nearest. These might return functions rather
      than/in addition to just values.

    - Another class for points? Or do we just let the user do this on their own,
      with closed-endpoint real intervals of size 0? Probably best not to bother
      with this one. We should, for example, make a new interval_overlap method
      where the query set is points -- a vector of positions -- rather than an
      inteval object.

    - The iapply idea: given a vector of positions, and a vector of values,
      compute intersections then and apply a function to the appropriate subset
      vector. 

    - Julien's "density" idea: a function which, for any position and window size,
      tells you the portion of the window overlapping intervals in the set of
      interest.  

    - A thresholding function like hit.intervals in intervaltools.

- (19 August 2008)

    - A sort method. Do we use sorting anywhere else in our code? If so, it would
      be good to replace ad hoc sorting with the standard method.

    - A good summary() method for large objects.

    - Note that we can put a manually manipulated version of index.html in
      inst/doc and this will be used instead of the automatically generated
      one. 